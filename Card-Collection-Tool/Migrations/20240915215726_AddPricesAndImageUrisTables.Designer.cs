// <auto-generated />
using System;
using Card_Collection_Tool.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Card_Collection_Tool.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240915215726_AddPricesAndImageUrisTables")]
    partial class AddPricesAndImageUrisTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Card_Collection_Tool.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("Card_Collection_Tool.Models.UserCardCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserCardCollections");
                });

            modelBuilder.Entity("ImageUris", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtCrop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BorderCrop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Large")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Normal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Png")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScryfallCardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Small")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScryfallCardId")
                        .IsUnique()
                        .HasFilter("[ScryfallCardId] IS NOT NULL");

                    b.ToTable("ImageUris");

                    b.HasAnnotation("Relational:JsonPropertyName", "image_uris");
                });

            modelBuilder.Entity("Legalities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alchemy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brawl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commander")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explorer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Future")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gladiator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Historic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Legacy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oathbreaker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pauper")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PauperCommander")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Penny")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pioneer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Predh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Premodern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScryfallCardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardBrawl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timeless")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vintage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScryfallCardId")
                        .IsUnique()
                        .HasFilter("[ScryfallCardId] IS NOT NULL");

                    b.ToTable("Legalities");

                    b.HasAnnotation("Relational:JsonPropertyName", "legalities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Prices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Eur")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ScryfallCardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Tix")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("USD")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ScryfallCardId")
                        .IsUnique()
                        .HasFilter("[ScryfallCardId] IS NOT NULL");

                    b.ToTable("Prices");

                    b.HasAnnotation("Relational:JsonPropertyName", "prices");
                });

            modelBuilder.Entity("ScryfallCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "artist");

                    b.Property<float?>("Cmc")
                        .HasColumnType("real")
                        .HasAnnotation("Relational:JsonPropertyName", "cmc");

                    b.Property<string>("CollectorNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "collector_number");

                    b.Property<string>("ColorIdentity")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "color_identity");

                    b.Property<string>("Colors")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "colors");

                    b.Property<bool?>("Digital")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "digital");

                    b.Property<string>("FlavorText")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "flavor_text");

                    b.Property<bool?>("FullArt")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "full_art");

                    b.Property<string>("Games")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "games");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "keywords");

                    b.Property<int>("LegalitiesId")
                        .HasColumnType("int");

                    b.Property<string>("ManaCost")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "mana_cost");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("OracleText")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "oracle_text");

                    b.Property<string>("Power")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "power");

                    b.Property<string>("Rarity")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "rarity");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "released_at");

                    b.Property<bool?>("Reprint")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "reprint");

                    b.Property<string>("ScryfallUri")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "scryfall_uri");

                    b.Property<string>("Set")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "set");

                    b.Property<string>("SetId")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "set_id");

                    b.Property<string>("SetName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "set_name");

                    b.Property<string>("Toughness")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "toughness");

                    b.Property<string>("TypeLine")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type_line");

                    b.Property<bool?>("Variation")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "variation");

                    b.Property<string>("VariationOf")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "variation_of");

                    b.HasKey("Id");

                    b.ToTable("ScryfallCards");
                });

            modelBuilder.Entity("ImageUris", b =>
                {
                    b.HasOne("ScryfallCard", "ScryfallCard")
                        .WithOne("ImageUris")
                        .HasForeignKey("ImageUris", "ScryfallCardId");

                    b.Navigation("ScryfallCard");
                });

            modelBuilder.Entity("Legalities", b =>
                {
                    b.HasOne("ScryfallCard", "ScryfallCard")
                        .WithOne("Legalities")
                        .HasForeignKey("Legalities", "ScryfallCardId");

                    b.Navigation("ScryfallCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prices", b =>
                {
                    b.HasOne("ScryfallCard", "ScryfallCard")
                        .WithOne("Prices")
                        .HasForeignKey("Prices", "ScryfallCardId");

                    b.Navigation("ScryfallCard");
                });

            modelBuilder.Entity("ScryfallCard", b =>
                {
                    b.Navigation("ImageUris");

                    b.Navigation("Legalities")
                        .IsRequired();

                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
